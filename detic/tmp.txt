"""LTP <--> SCH co/contra variant derivatives, Jacobians, tangent bundles,
and proto christofell symbols...

Derivative functions  and SYMPY string to compute them symbolically.
"""
from __future__ import division
import itertools
## \namespace geo.detic.tangent_bundle Tangent Frame Jacobians

## Helper to take inner product of basis iterales and make a tensor.
def _metric_tensor(h1, h2):
    from geo.metric.euclid.tensor import Tensor        
    return Tensor(*[(a*b).w for a, b in itertools.product(h1, h2)])

def _inv(v):
    return v * (v**2).w**-1

## >>>exex(SYMPY_SCH) will run these for you
SYMPY_SCH = """
from sympy import *

x, y, z = symbols('x y z')
s, c, h = symbols('s c h')
R= symbols('R')

S = R*atan2(x, R+z)
C = R*asin(y/sqrt(x**2 + y**2 + (R+z)**2))
H = sqrt(x**2 + y**2 + (R+z)**2) - R

ds_dx = diff(S, x)
ds_dy = diff(S, y)
ds_dz = diff(S, z)

dc_dx = diff(C, x)
dc_dy = diff(C, y)
dc_dz = diff(C, z)


dh_dx = diff(H, x)
dh_dy = diff(H, y)
dh_dz = diff(H, z)

#X = (h + R) * cos(pi/2 - c/R) * sin(s/R)
#Y = (h + R) * sin(pi/2 - c/R) * sin(s/R)
#Z = (h + R) * cos(s/R) - R

## REMMBER: LTP's xyz is swapped from nominal spherical coordinate inversions.
X = (h + R) * sin(pi/2 - c/R) * sin(s/R)
Y = (h + R) * cos(pi/2 - c/R)
Z = (h + R) * sin(pi/2 - c/R) * cos(s/R) - R

dx_ds = diff(X, s)
dx_dc = diff(X, c)
dx_dh = diff(X, h)

dy_ds = diff(Y, s)
dy_dc = diff(Y, c)
dy_dh = diff(Y, h)

dz_ds = diff(Z, s)
dz_dc = diff(Z, c)
dz_dh = diff(Z, h)
"""


SYMPY_LLH = """
from sympy import *

x, y, z = symbols('x y z')
lat, lon, hgt = symbols('lat lon hgt')
a, b = symbols('a b')

N = (a**2 / sqrt( (a * cos(pi*lat/180))**2 + (b * sin(pi*lat/180))**2 ))

M = (a*b)**2 / sqrt( (a * cos(pi*lat/180))**2 + (b * sin(pi*lat/180))**2 )**3

epsilon2 = (1-(b/a)**2)

X = cos(pi*lat/180) * cos(pi*lon/180) * ((a**2 / sqrt((a * cos(pi*lat/180))**2 + (b * sin(pi*lat/180))**2)) + hgt)
Y = cos(pi*lat/180) * sin(pi*lon/180) * ((a**2 / sqrt((a * cos(pi*lat/180))**2 + (b * sin(pi*lat/180))**2)) + hgt)
Z = sin(pi*lat/180) * ( (b/a)**2 *  (a**2 / sqrt((a * cos(pi*lat/180))**2 + (b * sin(pi*lat/180))**2)) + hgt)

dX_dlat = diff(X, lat)
dX_dlon = diff(X, lon)
dX_dhgt = diff(X, hgt)

dY_dlat = diff(Y, lat)
dY_dlon = diff(Y, lon)
dY_dhgt = diff(Y, hgt)

dZ_dlat = diff(Z, lat)
dZ_dlon = diff(Z, lon)
dZ_dhgt = diff(Z, hgt)



hdg = symbols('hdg')

LRC = 1/(cos(pi*hdg/180)**2/M + sin(pi*hdg/180)**2/N)

## lower metric
g_lon2 = diff(1/X, lon)**2 + diff(1/Y, lon)**2 + diff(1/Z, lon)**2
g_lat2 = diff(1/X, lat)**2 + diff(1/Y, lat)**2 + diff(1/Z, lat)**2
g_hgt2 = diff(1/X, hgt)**2 + diff(1/Y, hgt)**2 + diff(1/Z, hgt)**2

## Proto Christofel symbol
G_latlatlat = -0.5*(diff(g_lat2, lat))
G_latlatlon = -0.5*(diff(g_lat2, lon))
G_latlathgt = -0.5*(diff(g_lat2, hgt))
"""

def xyz2sch(R, x, y, z):
    """
    function of     x, y, z  (meters)
    returns a tuple    s, c, h, (meters)
    """
    from ..utils.trig import arctan2, arcsin
    h = R + z
    rho = (x**2 + y**2 + h**2)**0.5
    s = R*arctan2(x, h)
    c = R*arcsin(y/rho)
    h = rho - R
    return s, c, h


def sch2xyz(R, s, c, h):
    from ..utils.trig import pi, sin, cos
    phi = s/R
    theta = pi/2 - c/R
    r = h + R
    x = r * sin(theta) * sin(phi)
    y = r * cos(theta)
    z = r * sin(theta) * cos(phi)
    return x, y, z - R



## \f$ \frac{\partial s}{\partial x} =
# \frac{R(R+z)}{x^2 + (R+z)^2} \f$
def dsdx(R, x, y, z):
    return (
         R*(R + z)/(x**2 + (R + z)**2)
        )

## \f$ \frac{\partial s}{\partial y} = 0\f$
def dsdy(R, x, y, z):
    return (
        0*x
        )

## \f$ \frac{\partial s}{\partial z}  = 
# \frac{-Rx}{x^2 + (R+z)^2} \f$
def dsdz(R, x, y, z):
    return (
        -R*x/(x**2 + (R + z)**2)
        )


## \f$ \frac{\partial c}{\partial x} \f$
def dcdx(R, x, y, z):
    from ..utils.trig import sqrt
    return (
        -R*x*y/(sqrt(-y**2/(x**2 + y**2 + (R + z)**2) + 1)*(x**2 + y**2 + (R + z)**2)**(3/2.))
        )

## \f$ \frac{\partial c}{\partial y} =
#  R(-y^2/(x^2 + y^2 + (R + z)^2)^{\frac{3}{2}} + 1/\sqrt{x^2 + y^2 + (R + z)^2})/\sqrt{-y^2/(x^2 + y^2 + (R + z)^2) + 1} \f$
def dcdy(R, x, y, z):
    from ..utils.trig import sqrt
    return (
        R*(-(y**2)/(x**2 + y**2 + (R + z)**2)**(3/2.) + 1/sqrt(x**2 + y**2 + (R + z)**2))/sqrt(-y**2/(x**2 + y**2 + (R + z)**2) + 1)
        )

## \f$ \frac{\partial c}{\partial z} \f$
def dcdz(R, x, y, z):
    from ..utils.trig import sqrt
    return (
        -R*y*(R+z)/(sqrt(-(y**2)/(x**2 + y**2 + (R + z)**2) + 1)*(x**2 + y**2 + (R + z)**2)**(3/2.))
        )


## \f$ \frac{\partial h}{\partial x} =
# \frac{x}{\sqrt{x^2 +y^2 + (R+z)^2}}  \f$
def dhdx(R, x, y, z):
    from ..utils.trig import sqrt
    return (
        x/sqrt(x**2 + y**2 + (R + z)**2)
        )

## \f$ \frac{\partial h}{\partial y} 
# \frac{y}{\sqrt{x^2 +y^2 + (R+z)^2}}  \f$ 
def dhdy(R, x, y, z):
    from ..utils.trig import sqrt
    return (
        y/sqrt(x**2 + y**2 + (R + z)**2)
        )

## \f$ \frac{\partial h}{\partial z} 
# \frac{R+z}{\sqrt{x^2 +y^2 + (R+z)^2}}  \f$
def dhdz(R, x, y, z):
    from ..utils.trig import sqrt
    return (
        (R + z)/sqrt(x**2 + y**2 + (R + z)**2)
        )




## \f$ \frac{\partial x}{\partial s} 
# = \frac{(R+h)}{R}\cos{\frac{c}{R}}\cos{\frac{s}{R}}\f$
def dxds(R, s, c, h):
    from ..utils.trig import cos
    return (
        (R + h)*cos(c/R)*cos(s/R)/R
        )


## \f$ \frac{\partial x}{\partial c}
# = \frac{-(R+h)}{R}\sin{\frac{c}{R}}\sin{\frac{s}{R}}\f$
def dxdc(R, s, c, h):
    from ..utils.trig import sin
    return (
        -(R + h)*sin(c/R)*sin(s/R)/R
        )


## \f$ \frac{\partial x}{\partial s} 
# \sin{\frac{s}{R}}\cos{\frac{c}{R}}\f$
def dxdh(R, s, c, h):
    from ..utils.trig import sin, cos
    return (
        sin(s/R)*cos(c/R)
        )




## \f$ \frac{\partial y}{\partial s} =
# \frac{-(R+h)}{R}\sin{\frac{s}{R}} \f$
def dyds(R, s, c, h):
    return (
        s*0  # preserve broadcasting
        )


## \f$ \frac{\partial y}{\partial c} = 0\f$
def dydc(R, s, c, h):
    from ..utils.trig import cos
    return (
        (R + h)*cos(c/R)/R
         )


## \f$ \frac{\partial y}{\partial z}  = \cos{\frac{s}{R}}\f$
def dydh(R, s, c, h):
    from ..utils.trig import sin
    return (
        sin(c/R)
        )

## \f$ \frac{\partial z}{\partial s} = \frac{R+h}{R} \sin{\frac{c}{R}}\sin{\frac{s}{R}} \f$
def dzds(R, s, c, h):
    from ..utils.trig import sin, cos
    return (
        -(R + h)*sin(s/R)*cos(c/R)/R
        )


## \f$ \frac{\partial z}{\partial s} \f$
def dzdc(R, s, c, h):
    from ..utils.trig import sin, cos
    return (
        -(R + h)*sin(c/R)*cos(s/R)/R
        )


## \f$ \frac{\partial z}{\partial s} =\sin{\frac{c}{R}}\sin{\frac{s}{R}}  \f$
def dzdh(R, s, c, h):
    from ..utils.trig import cos
    return (
        cos(c/R)*cos(s/R)
        )



class _Frame(object):
     def local_basis(self):
        from geo.metric.euclid.tensor import ziprows          
        return ziprows(*[item.hat() for item in self._local_basis()])

## Mixin for coordinate with local basis vectors.
class _Local(_Frame):

     def 

    ## \f$ g^{ij} \$
    def covariant_metric_tensor(self):
         return _metric_tensor(*itertools.repeat(self.covariant_basis(), 2))
    
    ## \f$ g_{ij} \$
    def contravariant_metric_tensor(self):
        return _metric_tensor(*itertools.repeat(self._otf().contravariant_basis(), 2))
    
    ## \f$ g^i_j\$
    def mixed_metric_tensor(self):
        return _metric_tensor(self.covariant_basis(), self._otf().contravariant_basis())
    
class _Global(_Frame):
     pass

## Mixin for LTP's Tangent Bundle
class LTP(_Global):
    """Mixin for the Contravariant SCH Basis Vectors."""

    ## \f$ \vec{\del}} {\bf s}
    def grad_s(self):
        """Contravariant derivative of constant-s plane."""
        from geo.metric.euclid.vector import Vector
        return Vector(dsdx(self.R, self.x, self.y, self.z),
                      dsdy(self.R, self.x, self.y, self.z),
                      dsdz(self.R, self.x, self.y, self.z))
    
    ## \f$ {{\vec{\del}} {\bf c}}
    def grad_c(self):
        """Contravariant derivative of constant-c plane."""
        from geo.metric.euclid.vector import Vector
        return Vector(dcdx(self.R, self.x, self.y, self.z),
                      dcdy(self.R, self.x, self.y, self.z),
                      dcdz(self.R, self.x, self.y, self.z))
    
    
    ## \f$ {{\vec{\del}} {\bf h}}
    def grad_h(self):
        """Contravariant derivative of constant-h plane."""
        from geo.metric.euclid.vector import Vector
        return Vector(dhdx(self.R, self.x, self.y, self.z),
                      dhdy(self.R, self.x, self.y, self.z),
                      dhdz(self.R, self.x, self.y, self.z))
    
    ## Contravariant Local Basis at points in terms of Global Basis (constant s, c, h surface normals)
    ##\f$ \frac{{\vec{\del}} {\bf \hat{s}}}{|{\vec{\del}}} {\bf \hat{s}}|} \f$,
    # \f$ \frac{{\vec{\del}} {\bf \hat{c}}}{|{\vec{\del}}} {\bf \hat{c}}|} \f$,
    # \f$ \frac{{\vec{\del}} {\bf \hat{h}}}{|{\vec{\del}}} {\bf \hat{h}}|} \f$,
    def contravariant_basis(self):
        """Non-unit Vectors from: [grad_s, grad_c, grad_h]"""
        return [self.grad_s(), self.grad_c(), self.grad_h()]
    
    _local_basis = contravariant_basis
    
    ## Normalized conravariant basis as a Tensor.
    def local_basis(self):
        """Normalized Tensor of:
        | s_x s_y s_z |
        | c_x c_y c_z |
        | h_x h_y h_z |
        from contravariant_basis.
        """
        return super(self, LTP).local_basis()


    ## \f$ \bar{J}_{ij} = \frac{\partial q_i}{\partial {\bf x}_j}(x, y, z) \f$
    @property
    def J(self):
        """Jacobian from LTP:xyz to LTS:sch

        | ds/dx  ds/dy  ds/dz |
        |                     |
        | dc/dx  dc/dy  dc/dz |
        |                     |
        | dh/dx  dh/dy  dh/dz |
        """
        from geo.metric.euclid.tensor import Tensor
        return Tensor(dsdx(self.R, self.x, self.y, self.z),
                      dsdy(self.R, self.x, self.y, self.z),
                      dsdz(self.R, self.x, self.y, self.z),
                      
                      dcdx(self.R, self.x, self.y, self.z),
                      dcdy(self.R, self.x, self.y, self.z),
                      dcdz(self.R, self.x, self.y, self.z),
                      
                      dhdx(self.R, self.x, self.y, self.z),
                      dhdy(self.R, self.x, self.y, self.z),
                      dhdz(self.R, self.x, self.y, self.z))
    
    _local_basis = covariant_basis
    
    ## Normalized covariant_basis.
    def local_basis(self):
        """Normalized Tensor of:
        | s_x s_y s_z |
        | c_x c_y c_z |
        | h_x h_y h_z |
        from contravariant_basis.
        """
        return super(
        from geo.metric.euclid.tensor import ziprows
        return ziprows(*[item.hat() for item in self.covariant_basis()])


    
    ## \f$ \Gamma^m_{ij} = {\bf \epsilon}^m \cdot
    #  \frac{\partial {\bf \epsilon}_i}{\partial q} \f$
    def Christoffel2(self, m, i, j):
         """Probably not right"""
         from geo.metric.euclid.vector import BASIS, Vector
         e_m = BASIS[m]
         e_i = BASIS[j]
         grad_q = self.contravariant_basis()[j]
         return e_m * (grad_q >> e_i)



## Mixin for SCH's Tangent Bundle
class SCH(_Local):
    """Mixin for the Covariant SCH Basis Vectors."""
                      
    ## \f$s\f$-tangent vector
    def s_tan(self):
        """Covariant tangent vector parallel to 's' at point."""
        from geo.metric.euclid.vector import Vector
        return Vector(dxds(self.R, self.s, self.c, self.h),
                      dyds(self.R, self.s, self.c, self.h),
                      dzds(self.R, self.s, self.c, self.h))
        
    ## \f$c\f$-tangent vector    
    def c_tan(self):
        """Covariant tangent vector parallel to 'c' at point."""
        from geo.metric.euclid.vector import Vector
        return Vector(dxdc(self.R, self.s, self.c, self.h),
                      dydc(self.R, self.s, self.c, self.h),
                      dzdc(self.R, self.s, self.c, self.h))
        
    
    ## \f$h\f$-tangent vector
    def h_tan(self):
        """Covariant tangent vector parallel to 'h' at point."""
        from geo.metric.euclid.vector import Vector
        return Vector(dxdh(self.R, self.s, self.c, self.h),
                      dydh(self.R, self.s, self.c, self.h),
                      dzdh(self.R, self.s, self.c, self.h))
        

    ## Covariant Local Basis at points in terms of Global Basis
    # (s, c, h tangent lines)
    # \returns
    # \f$ {\bf \hat{s}} \f$, \f$ {\bf \hat{c}} \f$, \f$ {\bf \hat{h}} \f$
    def covariant_basis(self):
        """Non-unit vectors from  [s_tan, c_tan, h_tan]"""
        return [self.s_tan(), self.c_tan(), self.h_tan()]

    _local_basis = covariant_basis
        
    def local_basis(self):        
        return super(SCH, self).local_basis()
        
## \f$ J_{ij} = \frac{\partial {\bf x}_i}{\partial q_j}(s, c, h) \f$
    @property
    def J(self):
        """Jacobian from sch to LTP: xyz:

        | dx/ds  dx/dc  dx/dh |
        |                     |
        | dy/ds  dy/dc  dy/dh |
        |                     |
        | dz/ds  dz/dc  dz/dh |
        """
        from geo.metric.euclid.tensor import Tensor
        return Tensor(dxds(self.R, self.s, self.c, self.h),
                      dxdc(self.R, self.s, self.c, self.h),
                      dxdh(self.R, self.s, self.c, self.h),
                      
                      dyds(self.R, self.s, self.c, self.h),
                      dydc(self.R, self.s, self.c, self.h),
                      dydh(self.R, self.s, self.c, self.h),
                      
                      dzds(self.R, self.s, self.c, self.h),
                      dzdc(self.R, self.s, self.c, self.h),
                      dzdh(self.R, self.s, self.c, self.h))
                      





### NOW DO LAT LON
from geo.utils.trig import pi, sqrt, sin, cos

## \f$ \frac{\partial x}{\partial \phi} \f$
def dXdlat(a, b, lat, lon, hgt):
    return (
        a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*cos(pi*lat/180)*cos(pi*lon/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lat/180)*cos(pi*lon/180)/180
        )


## \f$ \frac{\partial x}{\partial \lambda} \f$
def dXdlon(a, b, lat, lon, hgt):
    return (
        -pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lon/180)*cos(pi*lat/180)/180
         )

## \f$ \frac{\partial x}{\partial h} = \cos{\phi}\cos{\lambda} \f$
def dXdhgt(a, b, lat, lon, hgt):
    return (
        cos(pi*lat/180)*cos(pi*lon/180)
        )

## \f$ \frac{\partial y}{\partial \phi} \f$
def dYdlat(a, b, lat, lon, hgt):
    return (
        a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*sin(pi*lon/180)*cos(pi*lat/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lat/180)*sin(pi*lon/180)/180
        )


## \f$ \frac{\partial y}{\partial \lambda} \f$
def dYdlon(a, b, lat, lon, hgt):
    return (
        pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*cos(pi*lat/180)*cos(pi*lon/180)/180
        )


## \f$ \frac{\partial y}{\partial h} = \cos{\phi}\sin{\lambda} \f$
def dYdhgt(a, b, lat, lon, hgt):
    return (
        sin(pi*lon/180)*cos(pi*lat/180)
        )


## \f$ \frac{\partial z}{\partial \phi}  \f$
def dZdlat(a, b, lat, lon, hgt):
    return (
        b**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*sin(pi*lat/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) + pi*(b**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*cos(pi*lat/180)/180
        )


## \f$ \frac{\partial z}{\partial h} = 0 \f$
def dZdlon(a, b, lat, lon, hgt):
    return (
        0*lat
        )

## \f$ \frac{\partial z}{\partial h} = \sin{\phi} \f$
def dZdhgt(a, b, lat, lon, hgt):
    return (
        sin(pi*lat/180)
        )


## \f$ \frac{dN}{d\phi} \f$
def dNdlat(a, b, lat):
    return (
        a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2)
        )

## \f$ \frac{dM}{d\phi} \f$
def dMdlat(a, b, lat):
    return (
        a**2*b**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/60 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/60)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(5/2)
        )

## \f$ \frac{\partial R}{\partial \phi} \f$
def dRdlat(a, b, lat, hdg):
    return (
        (-(-pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 + pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*sin(pi*hdg/180)**2/(a**2*sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)) - sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)*(-pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/60 + pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/60)*cos(pi*hdg/180)**2/(a**2*b**2))/(sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)*sin(pi*hdg/180)**2/a**2 + (a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2)*cos(pi*hdg/180)**2/(a**2*b**2))**2
        )

## \f$ \frac{\partial R}{\partial \psi} \f$
def dRdhdg(a, b, lat, hdg):
    return (
        (-pi*sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)*sin(pi*hdg/180)*cos(pi*hdg/180)/(90*a**2) + pi*(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2)*sin(pi*hdg/180)*cos(pi*hdg/180)/(90*a**2*b**2))/(sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)*sin(pi*hdg/180)**2/a**2 + (a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2)*cos(pi*hdg/180)**2/(a**2*b**2))**2
        )


## Must do a bug check on dZdlat and latitude degree length
class LLH(_Local):
    """Mixin for the Covariant Lat/Lon/Hgt wrt ECEF."""    

    
    @property
    def a(self):
        return self.ellipsoid.a

    @property
    def b(self):
        return self.ellipsoid.b
    
    def lat_tan(self):
        """Covariant tangent vector parallel to 's' at point."""
        from geo.metric.euclid.vector import Vector
        return Vector(dXdlat(self.a, self.b, self.lat, self.lon, self.hgt),
                      dYdlat(self.a, self.b, self.lat, self.lon, self.hgt),
                      dZdlat(self.a, self.b, self.lat, self.lon, self.hgt))
        
    
    def lon_tan(self):
        """Covariant tangent vector parallel to 'c' at point."""
        from geo.metric.euclid.vector import Vector
        return Vector(dXdlon(self.a, self.b, self.lat, self.lon, self.hgt),
                      dYdlon(self.a, self.b, self.lat, self.lon, self.hgt),
                      dZdlon(self.a, self.b, self.lat, self.lon, self.hgt))
        
    
    def hgt_tan(self):
        """Covariant tangent vector parallel to 'h' at point."""
        from geo.metric.euclid.vector import Vector
        return Vector(dXdhgt(self.a, self.b, self.lat, self.lon, self.hgt),
                      dYdhgt(self.a, self.b, self.lat, self.lon, self.hgt),
                      dZdhgt(self.a, self.b, self.lat, self.lon, self.hgt))
        

    ## Covariant Local Basis at points in terms of Global Basis
    # (s, c, h tangent lines)
    # \returns
    # \f$ {\bf \hat{s}} \f$, \f$ {\bf \hat{c}} \f$, \f$ {\bf \hat{h}} \f$
    def covariant_basis(self):
        """Non-unit vectors from  [lat_tan, lon_tan, hgt_tan]"""
        return [self.lat_tan(), self.lon_tan(), self.hgt_tan()]


## \f$ J_{ij} = \frac{\partial {\bf x}_i}{\partial q_j}(s, c, hgt) \f$
    @property
    def J(self):
        """Jacobian from LLH to ECEF:

        | dX/dlat  dX/dlon  dX/dhgt |
        |                     |
        | dY/dlat  dY/dlon  dY/dhgt |
        |                     |
        | dZ/dlat  dZ/dlon  dZ/dhgt |
        """
        from geo.metric.euclid.tensor import Tensor
        return Tensor(dXdlat(self.a, self.b, self.lat, self.lon, self.hgt),
                      dXdlon(self.a, self.b, self.lat, self.lon, self.hgt),
                      dXdhgt(self.a, self.b, self.lat, self.lon, self.hgt),
                      
                      dYdlat(self.a, self.b, self.lat, self.lon, self.hgt),
                      dYdlon(self.a, self.b, self.lat, self.lon, self.hgt),
                      dYdhgt(self.a, self.b, self.lat, self.lon, self.hgt),
                      
                      dZdlat(self.a, self.b, self.lat, self.lon, self.hgt),
                      dZdlon(self.a, self.b, self.lat, self.lon, self.hgt),
                      dZdhgt(self.a, self.b, self.lat, self.lon, self.hgt))
                      

    
class ECEF(object):
     
     def grad_lat(self): return _inv(self.llh().lat_tan())
     def grad_lon(self): return _inv(self.llh().lon_tan())
     def grad_hgt(self): return _inv(self.llh().hgt_tan())
     

     def contravariant_basis(self):
          return [item/(item*item) for item in self.llh().covariant_basis()]


     def local_basis(self):
          """Normalized Tensor of:
        | lat_x lat_y lat_z |
        | lon_x lon_y lon_z |
        | hgt_x hgt_y hgt_z |
        from covariant_basis.
        """
        return super(ECEF, self).local_basis()

     @property
     def J(self):
          """Jacobian from ECEF to LLH:
          
          | dX/dlat  dX/dlon  dX/dhgt |**(-1) 
          |                           |
          | dY/dlat  dY/dlon  dY/dhgt |
          |                           |
          | dZ/dlat  dZ/dlon  dZ/dhgt |
          """
          return self.llh().J.I
     



def g_lat_lon(a, b, lat, lon, hgt):
     return  (
          pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*(a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*sin(pi*lon/180)*cos(pi*lat/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lat/180)*sin(pi*lon/180)/180)*cos(pi*lat/180)*cos(pi*lon/180)/180 - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*(a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*cos(pi*lat/180)*cos(pi*lon/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lat/180)*cos(pi*lon/180)/180)*sin(pi*lon/180)*cos(pi*lat/180)/180

          )


## diff(X, lat)*diff(X, lat) + diff(Y, lat)*diff(Y, lat) + diff(Z, lat)*diff(Z, lat)
def g_lat_lat(a, b, lat, lon, hgt):
     return (
          (b**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*sin(pi*lat/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) + pi*(b**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*cos(pi*lat/180)/180)**2 + (a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*sin(pi*lon/180)*cos(pi*lat/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lat/180)*sin(pi*lon/180)/180)**2 + (a**2*(pi*a**2*sin(pi*lat/180)*cos(pi*lat/180)/180 - pi*b**2*sin(pi*lat/180)*cos(pi*lat/180)/180)*cos(pi*lat/180)*cos(pi*lon/180)/(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2)**(3/2) - pi*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)*sin(pi*lat/180)*cos(pi*lon/180)/180)**2
          )

# =          diff(X, lon)**2 + diff(Y, lon)**2 + diff(Z, lon)**2
def g_lon_lon(a, b, lat, lon, hgt):
     return (
pi**2*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)**2*sin(pi*lon/180)**2*cos(pi*lat/180)**2/32400 + pi**2*(a**2/sqrt(a**2*cos(pi*lat/180)**2 + b**2*sin(pi*lat/180)**2) + hgt)**2*cos(pi*lat/180)**2*cos(pi*lon/180)**2/32400
          )
